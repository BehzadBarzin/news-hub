/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/articles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all articles
         * @description Returns a paginated list of articles with optional filtering and relations
         */
        get: operations["11aa4cc6561a7b94c56d1201d62513ee"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/articles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific article
         * @description Returns a single article by ID with optional relations
         */
        get: operations["b3e529eab04efb5d305b07e2e58d9869"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: operations["8a56853624e025573120a09a4c75d468"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user */
        post: operations["a3b306d14572d1f4bd6c064b3233e7b8"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout user */
        post: operations["fe8f3429cd6979b3b4517e186505f9f9"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get authenticated user */
        get: operations["9d9bc556f927575aa492a88c28fe5908"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/authors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all authors
         * @description Returns a paginated list of authors with optional filtering
         */
        get: operations["0c71439e213e1b284fc37995d74bca2b"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/authors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific author
         * @description Returns a single author by ID with optional relations
         */
        get: operations["c14c739d68f46a33acfd0694a12c27dc"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all categories
         * @description Returns a paginated list of categories with optional filtering
         */
        get: operations["3f5817a34833d0a1f4af4548dd3aeaba"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific category
         * @description Returns a single category by ID with optional relations
         */
        get: operations["c68e76d323c008827a9e47398b1583de"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/feeds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all feeds for the authenticated user */
        get: operations["f852fc49018a9d36390d21e90f1d000d"];
        put?: never;
        /** Create a new feed */
        post: operations["a3c6b9596ee7fc33e562efb90148c1d6"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/feeds/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific feed */
        get: operations["93d64c25c3d471aace28a9b999df098a"];
        put?: never;
        post?: never;
        /** Delete a feed */
        delete: operations["acd0827876b1e9d2827e83d5a1a6e04e"];
        options?: never;
        head?: never;
        /** Update a feed */
        patch: operations["099650bb6dcfe621de7499a0b6a5a1e1"];
        trace?: never;
    };
    "/api/feeds/{id}/articles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get articles for a specific feed */
        get: operations["7cd8d80f565edfd7900058c666b9a1ce"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all sources
         * @description Returns a paginated list of sources with optional filtering
         */
        get: operations["3961c337f9d8a0b11f9e8c6e0c0f4254"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sources/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific source
         * @description Returns a single source by ID with optional relations
         */
        get: operations["78d7f62e5c2412a71386f6adfdf09eb2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PaginationMeta: {
            /** @example http://example.com/api/resource */
            path?: string;
            /** @example http://example.com/api/resource?page=2 */
            first_page_url?: string;
            /** @example http://example.com/api/resource?page=1 */
            prev_page_url?: string;
            /** @example http://example.com/api/resource?page=3 */
            next_page_url?: string;
            /** @example 15 */
            per_page?: number;
            /** @example 2 */
            current_page?: number;
            /** @example 16 */
            from?: number;
            /** @example 30 */
            to?: number;
        };
        Article: {
            id?: number;
            source_id?: number;
            category_id?: number;
            title?: string;
            description?: string;
            url?: string;
            image_url?: string;
            /** Format: date-time */
            published_at?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            source?: components["schemas"]["Source"];
            category?: components["schemas"]["Category"];
            authors?: components["schemas"]["Author"][];
        };
        Author: {
            id?: number;
            name?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        Category: {
            id?: number;
            name?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        Feed: {
            /** @example 1 */
            id?: number;
            /** @example My Personal Feed */
            name?: string;
            /** @example 1 */
            user_id?: number;
            /** @example [
             *       "laravel",
             *       "api"
             *     ] */
            keywords?: string[];
            /**
             * Format: date-time
             * @example 2023-10-01T12:00:00Z
             */
            created_at?: string;
            /**
             * Format: date-time
             * @example 2023-10-01T12:00:00Z
             */
            updated_at?: string;
            authors?: components["schemas"]["Author"][];
            sources?: components["schemas"]["Source"][];
            categories?: components["schemas"]["Category"][];
        };
        Source: {
            id?: number;
            name?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        User: {
            id?: number;
            name?: string;
            email?: string;
            /**
             * Format: nullable
             * @example null
             */
            email_verified_at?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "11aa4cc6561a7b94c56d1201d62513ee": {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
                /** @description Comma-separated list of keywords to filter articles by title */
                title?: string;
                /** @description Comma-separated array of Source IDs to filter articles by source */
                source?: string;
                /** @description Comma-separated array of Category IDs to filter articles by category */
                category?: string;
                /** @description Comma-separated array of Author IDs to filter articles by authors */
                authors?: string;
                /** @description Filter articles published after a specific date (YYYY-MM-DD) */
                published_after?: string;
                /** @description Filter articles published before a specific date (YYYY-MM-DD) */
                published_before?: string;
                /** @description Comma-separated relations to include (e.g., source,category,authors). Supports nested relations (e.g. source.articles) */
                with?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationMeta"] & {
                        data?: components["schemas"]["Article"][];
                    };
                };
            };
        };
    };
    b3e529eab04efb5d305b07e2e58d9869: {
        parameters: {
            query?: {
                /** @description Comma-separated relations to include (e.g., source,category,authors). Supports nested relations (e.g. source.articles) */
                with?: string;
            };
            header?: never;
            path: {
                /** @description ID of the article */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Article"];
                };
            };
            /** @description Article not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "8a56853624e025573120a09a4c75d468": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example John Doe */
                    name: string;
                    /**
                     * Format: email
                     * @example john@example.com
                     */
                    email: string;
                    /**
                     * Format: password
                     * @example password123
                     */
                    password: string;
                    /**
                     * Format: password
                     * @example password123
                     */
                    password_confirmation: string;
                };
            };
        };
        responses: {
            /** @description User registered successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        user?: components["schemas"]["User"];
                        /** @example 15|YZ96KFLia3fqgT8RWS7wQodsDVIEkGG4EC1Km6UJfe06ce14 */
                        token?: string;
                    };
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    a3b306d14572d1f4bd6c064b3233e7b8: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: email
                     * @example john@example.com
                     */
                    email: string;
                    /**
                     * Format: password
                     * @example password123
                     */
                    password: string;
                };
            };
        };
        responses: {
            /** @description User logged in successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        user?: components["schemas"]["User"];
                        /** @example 15|YZ96KFLia3fqgT8RWS7wQodsDVIEkGG4EC1Km6UJfe06ce14 */
                        token?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    fe8f3429cd6979b3b4517e186505f9f9: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User logged out successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "9d9bc556f927575aa492a88c28fe5908": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Authenticated user data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "0c71439e213e1b284fc37995d74bca2b": {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
                /** @description Filter authors by name */
                name?: string;
                /** @description Comma-separated relations to include (e.g., articles). Supports nested relations (e.g. articles.source) */
                with?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationMeta"] & {
                        data?: components["schemas"]["Author"][];
                    };
                };
            };
        };
    };
    c14c739d68f46a33acfd0694a12c27dc: {
        parameters: {
            query?: {
                /** @description Comma-separated relations to include (e.g., articles). Supports nested relations (e.g. articles.source) */
                with?: string;
            };
            header?: never;
            path: {
                /** @description ID of the author */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Author"];
                };
            };
            /** @description Author not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "3f5817a34833d0a1f4af4548dd3aeaba": {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
                /** @description Filter categories by name */
                name?: string;
                /** @description Comma-separated relations to include (e.g., articles). Supports nested relations (e.g. articles.source) */
                with?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"][];
                };
            };
        };
    };
    c68e76d323c008827a9e47398b1583de: {
        parameters: {
            query?: {
                /** @description Comma-separated relations to include (e.g., articles). Supports nested relations (e.g. articles.source) */
                with?: string;
            };
            header?: never;
            path: {
                /** @description ID of the category */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    f852fc49018a9d36390d21e90f1d000d: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of feeds */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feed"][];
                };
            };
        };
    };
    a3c6b9596ee7fc33e562efb90148c1d6: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example My Personal Feed */
                    name: string;
                    /** @example [
                     *       1,
                     *       2
                     *     ] */
                    authors?: number[];
                    /** @example [
                     *       1
                     *     ] */
                    sources?: number[];
                    /** @example [
                     *       3
                     *     ] */
                    categories?: number[];
                    /** @example [
                     *       "laravel",
                     *       "api"
                     *     ] */
                    keywords?: string[];
                };
            };
        };
        responses: {
            /** @description Feed created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feed"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "93d64c25c3d471aace28a9b999df098a": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Feed ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Feed details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feed"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Feed not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    acd0827876b1e9d2827e83d5a1a6e04e: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Feed ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Feed deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Feed not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "099650bb6dcfe621de7499a0b6a5a1e1": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Feed ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example Updated Feed Name */
                    name?: string;
                    /** @example [
                     *       1
                     *     ] */
                    authors?: number[];
                    /** @example [
                     *       1
                     *     ] */
                    sources?: number[];
                    /** @example [
                     *       3
                     *     ] */
                    categories?: number[];
                    /** @example [
                     *       "laravel",
                     *       "api",
                     *       "new"
                     *     ] */
                    keywords?: string[];
                };
            };
        };
        responses: {
            /** @description Feed updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feed"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Feed not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "7cd8d80f565edfd7900058c666b9a1ce": {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
                /** @description Comma-separated relations to include (e.g., source,category,authors). Supports nested relations (e.g. source.articles) */
                with?: string;
            };
            header?: never;
            path: {
                /** @description Feed ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of articles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationMeta"] & {
                        data?: components["schemas"]["Article"][];
                    };
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Feed not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "3961c337f9d8a0b11f9e8c6e0c0f4254": {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
                /** @description Filter sources by name */
                name?: string;
                /** @description Comma-separated relations to include (e.g., articles). Supports nested relations (e.g. articles.category) */
                with?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationMeta"] & {
                        data?: components["schemas"]["Source"][];
                    };
                };
            };
        };
    };
    "78d7f62e5c2412a71386f6adfdf09eb2": {
        parameters: {
            query?: {
                /** @description Comma-separated relations to include (e.g., articles). Supports nested relations (e.g. articles.category) */
                with?: string;
            };
            header?: never;
            path: {
                /** @description ID of the source */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Source"];
                };
            };
            /** @description Source not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
